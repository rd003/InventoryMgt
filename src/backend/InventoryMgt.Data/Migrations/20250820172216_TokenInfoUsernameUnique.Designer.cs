// <auto-generated />
using System;
using InventoryMgt.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryMgt.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250820172216_TokenInfoUsernameUnique")]
    partial class TokenInfoUsernameUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InventoryMgt.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_category_id");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_category_active")
                        .HasFilter("(is_deleted = false)");

                    b.HasIndex(new[] { "CategoryName" }, "idx_category_name");

                    b.HasIndex(new[] { "CategoryId" }, "idx_category_parent")
                        .HasFilter("(category_id IS NOT NULL)");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("product_pkey");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_product_active")
                        .HasFilter("(is_deleted = false)");

                    b.HasIndex(new[] { "CategoryId" }, "idx_product_category");

                    b.HasIndex(new[] { "CategoryId", "IsDeleted" }, "idx_product_category_active");

                    b.HasIndex(new[] { "ProductName" }, "idx_product_name");

                    b.HasIndex(new[] { "Price" }, "idx_product_price");

                    b.HasIndex(new[] { "SupplierId" }, "idx_product_supplier");

                    b.HasIndex(new[] { "SupplierId", "IsDeleted" }, "idx_product_supplier_active");

                    b.HasIndex(new[] { "Sku" }, "product_sku_key")
                        .IsUnique();

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("invoice_number");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("purchase_order_number");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("purchase_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("purchase", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Quantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("SellingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("selling_date");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("sale_pkey");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_sale_active")
                        .HasFilter("(is_deleted = false)");

                    b.HasIndex(new[] { "SellingDate" }, "idx_sale_date");

                    b.HasIndex(new[] { "SellingDate", "ProductId" }, "idx_sale_date_product")
                        .HasFilter("(is_deleted = false)");

                    b.HasIndex(new[] { "ProductId" }, "idx_sale_product");

                    b.HasIndex(new[] { "ProductId", "SellingDate" }, "idx_sale_product_date");

                    b.ToTable("sale", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("stock_pkey");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_stock_active")
                        .HasFilter("(is_deleted = false)");

                    b.HasIndex(new[] { "Quantity" }, "idx_stock_quantity");

                    b.HasIndex(new[] { "ProductId" }, "stock_product_id_key")
                        .IsUnique();

                    b.ToTable("stock", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_person");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("PaymentTerms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("payment_terms");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("supplier_name");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_number");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("supplier_pkey");

                    b.HasIndex(new[] { "IsActive" }, "idx_supplier_active")
                        .HasFilter("(is_active = true)");

                    b.HasIndex(new[] { "Email" }, "idx_supplier_email");

                    b.HasIndex(new[] { "SupplierName" }, "idx_supplier_name");

                    b.HasIndex(new[] { "IsDeleted" }, "idx_supplier_not_deleted")
                        .HasFilter("(is_deleted = false)");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.TokenInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_token_info");

                    b.HasIndex(new[] { "Username" }, "uq_token_info_username")
                        .IsUnique();

                    b.ToTable("token_info", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user_id");

                    b.HasIndex(new[] { "Username" }, "uq_username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Category", b =>
                {
                    b.HasOne("InventoryMgt.Data.Models.Category", "CategoryNavigation")
                        .WithMany("InverseCategoryNavigation")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_category_parent");

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Product", b =>
                {
                    b.HasOne("InventoryMgt.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("product_category_id_fkey");

                    b.HasOne("InventoryMgt.Data.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("product_supplier_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Purchase", b =>
                {
                    b.HasOne("InventoryMgt.Data.Models.Product", "Product")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("purchase_product_id_fkey");

                    b.HasOne("InventoryMgt.Data.Models.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("purchase_supplier_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Sale", b =>
                {
                    b.HasOne("InventoryMgt.Data.Models.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("sale_product_id_fkey");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Stock", b =>
                {
                    b.HasOne("InventoryMgt.Data.Models.Product", "Product")
                        .WithOne("Stock")
                        .HasForeignKey("InventoryMgt.Data.Models.Stock", "ProductId")
                        .HasConstraintName("stock_product_id_fkey");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Category", b =>
                {
                    b.Navigation("InverseCategoryNavigation");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Product", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("InventoryMgt.Data.Models.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
